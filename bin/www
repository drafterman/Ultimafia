#!/usr/bin/env node

/**
 * Module dependencies.
 */

const dotenv = require("dotenv").config();
const fs = require("fs");
const app = require("../app");
const debug = require("debug")("ultimafia:server");
const http = require("http");
const logger = require("../modules/logging")(".");
const db = require("../db/db");
const periodic = require("../modules/periodic.js");
const startup = require("../modules/startup.js");
var server;
const Inspector = require('inspector-api');

/**
 * Get port from environment and store in Express.
 */

const port = process.env.PORT || 3000;
app.set("port", port);

/**
 * Start server once db connection is initialized
 */
var inspector = new Inspector();
(async function () {
	await this.inspector.profiler.enable();
	await this.inspector.profiler.start();
	try {
		await db.promise;

		/**
		 * Create HTTP server.
		 */

		server = http.createServer(app);

		/**
		 * Listen on provided port, on all network interfaces.
		 */

		server.listen(port);
		server.on("error", onError);
		server.on("listening", onListening);

		/**
		 * Start periodic scripts
		 */
		periodic();

		/*
		 * Run startup jobs
		 */
		startup();
	}
	catch (e) {
		logger.error(e);
	}
	await inspector.profiler.stop();
})();

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	var bind = typeof port === "string"
		? "Pipe " + port
		: "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string"
		? "pipe " + addr
		: "port " + addr.port;
	debug("Listening on " + bind);
}

/**
 * Log uncaught exceptions and promise rejections
 */

process
	.on("unhandledRejection", (e) => logger.error(e))
	.on("uncaughtException", (e) => logger.error(e));
